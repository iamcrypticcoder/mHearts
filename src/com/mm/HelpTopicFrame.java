/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * HelpTopicFrame.java
 *
 * Created on Aug 8, 2010, 7:37:00 PM
 */

package com.mm;

import java.awt.Font;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;

/**
 *
 * @author hj
 */
public class HelpTopicFrame extends javax.swing.JFrame implements ListSelectionListener {

    String helpTopics[] = { "Hearts overview", "Play Hearts", "Score List", "Strategies and tips" };

    String heartsOverview = "The object of Hearts is to have the lowest score at the end of the game.";
    String playHearts = "Choose three cards to pass to an opponent (except for every fourth hand, when no cards are passed). \n" +
                        "To select a card to pass, click it. To cancel the selection of a card, click it again.\n" +
                        "The player who has the two of clubs starts the play by leading with it.\n" +
                        "Each player, moving clockwise, clicks a card to play. You must play a card in the same suit.\n" +
                        "If you do not have one, you can play any card, except that you cannot play a heart or the queen\n" +
                        "of spades on the first trick.";

    String scoreList = "At the end of each hand, you get one point for each heart in your hand and 13 points \n" +
                        "for the queen of spades. The game continues until one player gets 100 points or more, \n" +
                        "or until the dealer quits the game. If you win all the hearts and the queen of spades \n" +
                        "in one hand (called Shooting the Moon), then you score zero points and each other player \n" +
                        "scores 26 points.";

    String tips = "Avoid taking a trick containing hearts or the queen of spades. The only time you will want \n" +
            "to take such tricks is when you are trying to Shoot the Moon or trying to prevent someone else from \n" +
            "successfully Shooting the Moon. To Shoot the Moon is to collect all the hearts and the queen of \n" +
            "spades. When that happens, you score zero points and each other player scores 26 points. Your \n" +
            "chances of successfully Shooting the Moon are best if your hand contains a large number of high-\n" +
            "value hearts and spades. On hands that begin by passing cards to an opponent, pass cards with high \n" +
            "values, such as aces or face cards. your highest cards early in the game, while your opponents are \n" +
            "likely to have some cards in each suit and will have to play those cards instead of hearts. Tricks \n" +
            "that do not contain any hearts or the queen of spades do not add to your score. Keep track of which \n" +
            "cards have been played, particularly whether the queen of spades has been played and whether hearts \n" +
            "have been broken (that is, whether a heart has been discarded on an earlier trick).";

    public HelpTopicFrame() {
        initComponents();
        setTitle("Help Topics");
        helpTopicJList.setListData(helpTopics);
        helpTopicJList.setFont(new Font("Calibri", Font.BOLD, 16));
        helpTopicJList.addListSelectionListener(this);
        helpTopicJList.setSelectedIndex(0);
        decriptionJTextArea.setFont(new Font("Calibri", Font.PLAIN, 14));

    }

    public void valueChanged(ListSelectionEvent e) {
        int index = helpTopicJList.getSelectedIndex();

        if(index == 0)
            decriptionJTextArea.setText(heartsOverview);
        else if(index == 1)
            decriptionJTextArea.setText(playHearts);
        else if(index == 2)
            decriptionJTextArea.setText(scoreList);
        else if(index == 3)
            decriptionJTextArea.setText(tips);
            
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        helpTopicJList = new javax.swing.JList();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        decriptionJTextArea = new javax.swing.JTextArea();
        jLabel2 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jScrollPane1.setViewportView(helpTopicJList);

        jLabel1.setText("Help Topic :");

        decriptionJTextArea.setColumns(20);
        decriptionJTextArea.setRows(5);
        jScrollPane2.setViewportView(decriptionJTextArea);

        jLabel2.setText("Help Description :");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 198, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 471, Short.MAX_VALUE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 450, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 381, Short.MAX_VALUE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 381, Short.MAX_VALUE))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
    * @param args the command line arguments
    */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new HelpTopicFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextArea decriptionJTextArea;
    private javax.swing.JList helpTopicJList;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    // End of variables declaration//GEN-END:variables



}
